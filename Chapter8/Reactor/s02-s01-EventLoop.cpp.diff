*** ./s01/EventLoop.cpp	2015-12-07 17:33:42.684000000 +0800
--- ./s02/EventLoop.cpp	2015-12-09 15:08:59.316000000 +0800
***************
*** 2,7 ****
--- 2,8 ----
  
  #include "Channel.h"
  #include "Poller.h"
+ #include "TimerQueue.h"
  
  #include "logging/Logging.h"
  
***************
*** 16,22 ****
      : looping_(false),
        quit_(false),
        threadId_(CurrentThread::tid()),
!       poller_(new Poller(this)){
      LOG_TRACE << "EventLoop created " << this << " in thread " << threadId_;
      if(t_loopInThisThread){
          LOG_FATAL << "Another EventLoop " << t_loopInThisThread
--- 17,24 ----
      : looping_(false),
        quit_(false),
        threadId_(CurrentThread::tid()),
!       poller_(new Poller(this)),
!       timerQueue_(new TimerQueue(this)){
      LOG_TRACE << "EventLoop created " << this << " in thread " << threadId_;
      if(t_loopInThisThread){
          LOG_FATAL << "Another EventLoop " << t_loopInThisThread
***************
*** 39,45 ****
  
      while(!quit_){
          activeChannels_.clear();
!         poller_->poll(kPollTimeMs, &activeChannels_);
          for(ChannelList::iterator it = activeChannels_.begin();
              it != activeChannels_.end(); ++it){
              (*it)->handleEvent();
--- 41,47 ----
  
      while(!quit_){
          activeChannels_.clear();
!         pollReturnTime_ = poller_->poll(kPollTimeMs, &activeChannels_);
          for(ChannelList::iterator it = activeChannels_.begin();
              it != activeChannels_.end(); ++it){
              (*it)->handleEvent();
***************
*** 55,60 ****
--- 57,76 ----
      // wakeup();
  }
  
+ TimerId EventLoop::runAt(const Timestamp& time, const TimerCallback& cb){
+     return timerQueue_->addTimer(cb, time, 0.0);
+ }
+ 
+ TimerId EventLoop::runAfter(double delay, const TimerCallback& cb){
+     Timestamp time(addTime(Timestamp::now(), delay));
+     return runAt(time, cb);
+ }
+ 
+ TimerId EventLoop::runEvery(double interval, const TimerCallback& cb){
+     Timestamp time(addTime(Timestamp::now(), interval));
+     return timerQueue_->addTimer(cb, time, interval);
+ }
+ 
  void EventLoop::updateChannel(Channel* channel){
      assert(channel->ownerLoop() == this);
      assertInLoopThread();
