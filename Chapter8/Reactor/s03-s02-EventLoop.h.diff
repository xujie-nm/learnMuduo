*** ./s02/EventLoop.h	2015-12-09 14:48:49.359952000 +0800
--- ./s03/EventLoopThread.h	2015-12-13 16:48:40.580000000 +0800
***************
*** 1,101 ****
! #ifndef MUDUO_NET_EVENTLOOP_H
! #define MUDUO_NET_EVENTLOOP_H
  
! #include "datetime/Timestamp.h"
  #include "thread/Thread.h"
- #include "Callbacks.h"
- #include "TimerId.h"
  
! #include <boost/scoped_ptr.hpp>
! #include <vector>
  
  namespace muduo{
!     class Channel;
!     class Poller;
!     class TimerQueue;
  
!     class EventLoop : boost::noncopyable{
          public:
-             // 建立事件轮询时，需判断当前线程是否有事件轮询
-             EventLoop();
-             
-             // force out-line dtor, for scoped_ptr members.
-             ~EventLoop();
- 
-             ///
-             /// Loops forever
-             ///
-             /// Must be called in the same thread as creation of the object.
-             ///
-             // 启动一个事件轮询
-             // 启动时需要注意当前事件轮询是否启动
-             // 当前事件轮询是否不在本线程中
-             // 获得当前活动事件的Channel列表，
-             // 依次调用每个Channel的handleEvent函数
-             void loop();
-             
-             // 用于退出poll
-             // 可能不会立即起效，
-             // 因为是设标志
-             // 可能当前还在loop中
-             void quit();
- 
-             ///
-             /// Time when poll returns, usually means data arrivial.
-             ///
-             Timestamp pollReturnTime() const{
-                 return pollReturnTime_;
-             }
- 
-             // timers
- 
-             ///
-             /// Runs callback at 'time'.
-             ///
-             TimerId runAt(const Timestamp& time, const TimerCallback& cb);
-             ///
-             /// Runs callback after @c delay seconds
-             ///
-             TimerId runAfter(double delay, const TimerCallback& cb);
-             ///
-             /// Runs callback every @c interval seconds.
-             ///
-             TimerId runEvery(double interval, const TimerCallback& cb);
- 
-             // void cancel(TimerId timerId)
- 
-             // internal use only
-             // 通过调用Poller的updateChannel来实现
-             void updateChannel(Channel* channel);
-             // void removeChannel(Channel* channel);
- 
-             void assertInLoopThread(){
-             //　断言是否在本线程中
-                 if(!isInLoopThread()){
-                     abortNotInLoopThread();
-                 }
-             }
- 
-             bool isInLoopThread()const{
-             // 判断事件轮询存储的线程ＩＤ是否等于当前线程ＩＤ
-                 return threadId_ == CurrentThread::tid();
-             }
  
!         private:
  
!             void abortNotInLoopThread();
  
!             typedef std::vector<Channel*> ChannelList;
  
!             bool looping_; // atomic
!             bool quit_; // atomic
!             const pid_t threadId_;
!             Timestamp pollReturnTime_;
!             boost::scoped_ptr<Poller> poller_;
!             boost::scoped_ptr<TimerQueue> timerQueue_;
!             ChannelList activeChannels_;
      };
  }
  
! #endif    // MUDUO_NET__EVENTLOOP_H
! 
--- 1,33 ----
! #ifndef MUDUO_NET_EVENTLOOPTHREAD_H
! #define MUDUO_NET_EVENTLOOPTHREAD_H
  
! #include "thread/Condition.h"
! #include "thread/Mutex.h"
  #include "thread/Thread.h"
  
! #include <boost/noncopyable.hpp>
  
  namespace muduo{
!     class EventLoop;
  
!     // 启动自己的线程，并在其中运行loop
!     class EventLoopThread : boost::noncopyable{
          public:
  
!             EventLoopThread();
!             ~EventLoopThread();
!             EventLoop* startLoop();
  
!         private:
  
!             void threadFunc();
  
!             EventLoop* loop_;
!             bool exiting_;
!             Thread thread_;
!             MutexLock mutex_;
!             Condition cond_;
      };
  }
  
! #endif
