*** ./s05/TcpConnection.cpp	2015-12-16 22:49:28.036000000 +0800
--- ./s06/TcpConnection.cpp	2015-12-23 17:24:54.275373000 +0800
***************
*** 4,9 ****
--- 4,10 ----
  #include "Channel.h"
  #include "EventLoop.h"
  #include "Socket.h"
+ #include "SocketsOps.h"
  
  #include <boost/bind.hpp>
  
***************
*** 28,33 ****
--- 29,40 ----
                << " fd = " << sockfd;
      channel_->setReadCallback(
              boost::bind(&TcpConnection::handleRead, this));
+     channel_->setWriteCallback(
+             boost::bind(&TcpConnection::handleWrite, this));
+     channel_->setCloseCallback(
+             boost::bind(&TcpConnection::handleClose, this));
+     channel_->setErrorCallback(
+             boost::bind(&TcpConnection::handleError, this));
  }
  
  TcpConnection::~TcpConnection(){
***************
*** 43,51 ****
      connectionCallback_(shared_from_this());
  }
  
  void TcpConnection::handleRead(){
      char buf[65536];
      ssize_t n =::read(channel_->fd(), buf, sizeof buf);
!     messageCallback_(shared_from_this(), buf, n);
!     // FIXME close connection if n == 0
  }
--- 50,92 ----
      connectionCallback_(shared_from_this());
  }
  
+ void TcpConnection::connectDestoryed(){
+     loop_->assertInLoopThread();
+     assert(state_ == kConnected);
+     setState(kDisconnected);
+     channel_->disableAll();
+     connectionCallback_(shared_from_this());
+ 
+     loop_->removeChannel(get_pointer(channel_));
+ }
+ 
  void TcpConnection::handleRead(){
      char buf[65536];
      ssize_t n =::read(channel_->fd(), buf, sizeof buf);
!     if(n > 0){
!         messageCallback_(shared_from_this(), buf, n);
!     }else if(n == 0){
!         handleClose();
!     }else{
!         handleError();
!     }
! }
! 
! void TcpConnection::handleWrite(){
! }
! 
! void TcpConnection::handleClose(){
!     loop_->assertInLoopThread();
!     LOG_TRACE << "TcpConnection::handleClose state = " << state_;
!     assert(state_ == kConnected);
!     // we don't close fd, leave it to dtor, so we can find leaks easily.
!     channel_->disableAll();
!     // must be the last line
!     closeCallback_(shared_from_this());
! }
! 
! void TcpConnection::handleError(){
!     int err = sockets::getSocketError(channel_->fd());
!     LOG_ERROR << "TcpConnection::handleError [" << name_
!               << "] - SO_ERROR = " << err << " " << strerror_tl(err);
  }
