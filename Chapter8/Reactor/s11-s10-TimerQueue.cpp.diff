*** ./s10/TimerQueue.cpp	2015-12-30 21:04:32.296000000 +0800
--- ./s11/TimerQueue.cpp	2016-01-06 15:58:25.340000000 +0800
***************
*** 7,12 ****
--- 7,13 ----
  #include "TimerId.h"
  
  #include <boost/bind.hpp>
+ #include <boost/foreach.hpp>
  
  #include <sys/timerfd.h>
  
***************
*** 68,74 ****
      : loop_(loop),
        timerfd_(createTimerfd()),
        timerfdChannel_(loop, timerfd_),
!       timers_(){
      timerfdChannel_.setReadCallback(
              boost::bind(&TimerQueue::handleRead, this));
      // we are always reading the timerfd, we disarm it with timerfd_settime.
--- 69,76 ----
      : loop_(loop),
        timerfd_(createTimerfd()),
        timerfdChannel_(loop, timerfd_),
!       timers_(),
!       callingExpiredTimers_(false){
      timerfdChannel_.setReadCallback(
              boost::bind(&TimerQueue::handleRead, this));
      // we are always reading the timerfd, we disarm it with timerfd_settime.
***************
*** 90,96 ****
      Timer* timer = new Timer(cb, when, interval);
      loop_->runInLoop(
              boost::bind(&TimerQueue::addTimerInLoop, this, timer));
!     return TimerId(timer);
  }
  
  void TimerQueue::addTimerInLoop(Timer* timer){
--- 92,103 ----
      Timer* timer = new Timer(cb, when, interval);
      loop_->runInLoop(
              boost::bind(&TimerQueue::addTimerInLoop, this, timer));
!     return TimerId(timer, timer->sequence());
! }
! 
! void TimerQueue::cancel(TimerId timerId){
!     loop_->runInLoop(
!             boost::bind(&TimerQueue::cancelInLoop, this, timerId));
  }
  
  void TimerQueue::addTimerInLoop(Timer* timer){
***************
*** 102,107 ****
--- 109,131 ----
      }
  }
  
+ void TimerQueue::cancelInLoop(TimerId timerId){
+     loop_->assertInLoopThread();
+     assert(timers_.size() == activeTimers_.size());
+     ActiveTimer timer(timerId.timer_, timerId.seq_);
+     ActiveTimerSet::iterator it = activeTimers_.find(timer);
+     if(it != activeTimers_.end()){
+         size_t n = timers_.erase(Entry(it->first->expiration(), it->first));
+         assert(n == 1);
+         (void) n;
+         delete it->first; // FIXME: no delete please
+         activeTimers_.erase(it);
+     }else if(callingExpiredTimers_){
+         cancelingTimers_.insert(timer);
+     }
+     assert(timers_.size() == activeTimers_.size());
+ }
+ 
  void TimerQueue::handleRead(){
      loop_->assertInLoopThread();
      Timestamp now(Timestamp::now());
***************
*** 109,123 ****
--- 133,153 ----
  
      std::vector<Entry> expired = getExpired(now);
  
+     callingExpiredTimers_ = true;
+     cancelingTimers_.clear();
      // safe to callback outside critical section
      for(std::vector<Entry>::iterator it = expired.begin();
          it != expired.end(); ++it){
          it->second->run();
      }
+ 
+     callingExpiredTimers_ = false;
+ 
      reset(expired, now);
  }
  
  std::vector<TimerQueue::Entry> TimerQueue::getExpired(Timestamp now){
+     assert(timers_.size() == activeTimers_.size());
      std::vector<Entry> expired;
      Entry sentry = std::make_pair(now, reinterpret_cast<Timer*>(UINTPTR_MAX));
      // 返回第一个未到期的timer
***************
*** 126,131 ****
--- 156,169 ----
      std::copy(timers_.begin(), it, back_inserter(expired));
      timers_.erase(timers_.begin(), it);
  
+     BOOST_FOREACH(Entry entry, expired){
+         ActiveTimer timer(entry.second, entry.second->sequence());
+         size_t n = activeTimers_.erase(timer);
+         assert(n == 1);
+         (void)n;
+     }
+ 
+     assert(timers_.size() == activeTimers_.size());
      return expired;
  }
  
***************
*** 134,140 ****
  
      for(std::vector<Entry>::const_iterator it = expired.begin();
          it != expired.end(); ++it){
!         if(it->second->repeat()){
              it->second->restart(now);
              insert(it->second);
          }else{
--- 172,181 ----
  
      for(std::vector<Entry>::const_iterator it = expired.begin();
          it != expired.end(); ++it){
!         
!         ActiveTimer timer(it->second, it->second->sequence());
!         if(it->second->repeat()
!         && cancelingTimers_.find(timer) == cancelingTimers_.end()){
              it->second->restart(now);
              insert(it->second);
          }else{
***************
*** 153,166 ****
  }
  
  bool TimerQueue::insert(Timer* timer){
      bool earliestChanged = false;
      Timestamp when = timer->expiration();
      TimerList::iterator it = timers_.begin();
      if(it == timers_.end() || when < it->first){
          earliestChanged = true;
      }
!     std::pair<TimerList::iterator, bool> result =
!         timers_.insert(std::make_pair(when, timer));
!     assert(result.second);
      return earliestChanged;
  }
--- 194,221 ----
  }
  
  bool TimerQueue::insert(Timer* timer){
+     loop_->assertInLoopThread();
+     assert(timers_.size() == activeTimers_.size());
      bool earliestChanged = false;
      Timestamp when = timer->expiration();
      TimerList::iterator it = timers_.begin();
      if(it == timers_.end() || when < it->first){
          earliestChanged = true;
      }
! 
!     {
!         std::pair<TimerList::iterator, bool> result =
!             timers_.insert(std::make_pair(when, timer));
!         assert(result.second);
!         (void) result;
!     }
!     {
!         std::pair<ActiveTimerSet::iterator, bool> result
!             = activeTimers_.insert(ActiveTimer(timer, timer->sequence()));
!         assert(result.second);
!         (void) result;
!     }
! 
!     assert(timers_.size() == activeTimers_.size());
      return earliestChanged;
  }
