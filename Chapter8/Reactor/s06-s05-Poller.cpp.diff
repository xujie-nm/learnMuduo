*** ./s05/Poller.cpp	2015-12-16 22:01:16.632150000 +0800
--- ./s06/Poller.cpp	2015-12-23 20:53:47.908000000 +0800
***************
*** 68,79 ****
          int idx = channel->index();
          assert(0 <= idx && idx < static_cast<int>(pollfds_.size()));
          struct pollfd& pfd = pollfds_[idx];
!         assert(pfd.fd == channel->fd() || pfd.fd == -1);
          pfd.events = static_cast<short>(channel->events());
          pfd.revents = 0;
          if(channel->isNoneEvent()){
              // ignore this pollfd
!             pfd.fd = -1;
          }
      }
  }
--- 68,106 ----
          int idx = channel->index();
          assert(0 <= idx && idx < static_cast<int>(pollfds_.size()));
          struct pollfd& pfd = pollfds_[idx];
!         assert(pfd.fd == channel->fd() || pfd.fd == -channel->fd()-1);
          pfd.events = static_cast<short>(channel->events());
          pfd.revents = 0;
          if(channel->isNoneEvent()){
              // ignore this pollfd
!             pfd.fd = -channel->fd()-1;
          }
      }
  }
+ 
+ void Poller::removeChannel(Channel* channel){
+     assertInLoopThread();
+     LOG_TRACE << "fd = " << channel->fd();
+     assert(channels_.find(channel->fd()) != channels_.end());
+     assert(channels_[channel->fd()] == channel);
+     assert(channel->isNoneEvent());
+     int idx = channel->index();
+     assert(0 <= idx && idx < static_cast<int>(pollfds_.size()));
+     const struct pollfd& pfd = pollfds_[idx];
+     (void)pfd;
+     assert(pfd.fd == -channel->fd()-1 && pfd.events == channel->events());
+     size_t n = channels_.erase(channel->fd());
+     assert(n == 1);
+     (void)n;
+     if(implicit_cast<size_t>(idx) == pollfds_.size() - 1){
+         pollfds_.pop_back();
+     }else{
+         int channelAtEnd = pollfds_.back().fd;
+         iter_swap(pollfds_.begin()+idx, pollfds_.end()-1);
+         if(channelAtEnd < 0){
+             channelAtEnd = -channelAtEnd-1;
+         }
+         channels_[channelAtEnd]->set_index(idx);
+         pollfds_.pop_back();
+     }
+ }
