*** ./s00/EventLoop.cpp	2015-12-06 16:25:56.868000000 +0800
--- ./s01/EventLoop.cpp	2015-12-07 17:33:42.684000000 +0800
***************
*** 1,17 ****
  #include "EventLoop.h"
  
  #include "logging/Logging.h"
  
  #include <assert.h>
- #include <poll.h>
  
  using namespace muduo;
  
  __thread EventLoop* t_loopInThisThread = 0;
  
  EventLoop::EventLoop()
      : looping_(false),
!       threadId_(CurrentThread::tid()){
      LOG_TRACE << "EventLoop created " << this << " in thread " << threadId_;
      if(t_loopInThisThread){
          LOG_FATAL << "Another EventLoop " << t_loopInThisThread
--- 1,22 ----
  #include "EventLoop.h"
  
+ #include "Channel.h"
+ #include "Poller.h"
+ 
  #include "logging/Logging.h"
  
  #include <assert.h>
  
  using namespace muduo;
  
  __thread EventLoop* t_loopInThisThread = 0;
+ const int kPollTimeMs = 10000;
  
  EventLoop::EventLoop()
      : looping_(false),
!       quit_(false),
!       threadId_(CurrentThread::tid()),
!       poller_(new Poller(this)){
      LOG_TRACE << "EventLoop created " << this << " in thread " << threadId_;
      if(t_loopInThisThread){
          LOG_FATAL << "Another EventLoop " << t_loopInThisThread
***************
*** 30,42 ****
      assert(!looping_);
      assertInLoopThread();
      looping_ = true;
  
!     ::poll(NULL, 0, 5*1000);
  
      LOG_TRACE << "EventLoop " << this << " stop looping";
      looping_ = false;
  }
  
  void EventLoop::abortNotInLoopThread(){
      LOG_FATAL << "EventLoop::abortNotInLoopThread - EventLoop " << this
                << " was created in threadId_ = " << threadId_
--- 35,66 ----
      assert(!looping_);
      assertInLoopThread();
      looping_ = true;
+     quit_ = false;
  
!     while(!quit_){
!         activeChannels_.clear();
!         poller_->poll(kPollTimeMs, &activeChannels_);
!         for(ChannelList::iterator it = activeChannels_.begin();
!             it != activeChannels_.end(); ++it){
!             (*it)->handleEvent();
!         }
!     }
  
      LOG_TRACE << "EventLoop " << this << " stop looping";
      looping_ = false;
  }
  
+ void EventLoop::quit(){
+     quit_ = true;
+     // wakeup();
+ }
+ 
+ void EventLoop::updateChannel(Channel* channel){
+     assert(channel->ownerLoop() == this);
+     assertInLoopThread();
+     poller_->updateChannel(channel);
+ }
+ 
  void EventLoop::abortNotInLoopThread(){
      LOG_FATAL << "EventLoop::abortNotInLoopThread - EventLoop " << this
                << " was created in threadId_ = " << threadId_
