*** ./s09/TcpServer.cpp	2015-12-29 16:30:30.232000000 +0800
--- ./s10/TcpServer.cpp	2015-12-31 15:44:52.800000000 +0800
***************
*** 3,8 ****
--- 3,9 ----
  #include "logging/Logging.h"
  #include "Acceptor.h"
  #include "EventLoop.h"
+ #include "EventLoopThreadPool.h"
  #include "SocketsOps.h"
  
  #include <boost/bind.hpp>
***************
*** 15,20 ****
--- 16,22 ----
      : loop_(CHECK_NOTNULL(loop)),
        name_(name),
        acceptor_(new Acceptor(loop, listenAddr)),
+       threadPool_(new EventLoopThreadPool(loop)),
        started_(false),
        nextConnId_(1){
      acceptor_->setNewConnectionCallback(
***************
*** 24,32 ****
--- 26,40 ----
  TcpServer::~TcpServer(){
  }
  
+ void TcpServer::setThreadNum(int numThreads){
+     assert(0 <= numThreads);
+     threadPool_->setThreadNum(numThreads);
+ }
+ 
  void TcpServer::start(){
      if(!started_){
          started_ = true;
+         threadPool_->start();
      }
  
      if(!acceptor_->listening()){
***************
*** 47,71 ****
               << "] from" << peerAddr.toHostPort();
      InetAddress localAddr(sockets::getLocalAddr(sockfd));
      // FIXME poll with zero timeout to double confirm the new connection
      TcpConnectionPtr conn(
!             new TcpConnection(loop_, connName, sockfd, localAddr, peerAddr));
      connections_[connName] = conn;
      conn->setConnectionCallback(connectionCallback_);
      conn->setMessageCallback(messageCallback_);
      conn->setWriteCompleteCallback(writeCompleteCallback_);
      conn->setCloseCallback(
              boost::bind(&TcpServer::removeConnection, this, _1));
!     conn->connectEstablished();
  }
  
  void TcpServer::removeConnection(const TcpConnectionPtr& conn){
      loop_->assertInLoopThread();
!     LOG_INFO << "TcpServer::removeConnection [" << name_
               << "] - connection " << conn->name();
      size_t n = connections_.erase(conn->name());
      assert(n == 1);
      (void) n;
      // 延长生命周期,让conn的生命周期延长到connectedDestoryed被调用的时候
!     loop_->queueInLoop(
              boost::bind(&TcpConnection::connectDestoryed, conn));
  }
--- 55,91 ----
               << "] from" << peerAddr.toHostPort();
      InetAddress localAddr(sockets::getLocalAddr(sockfd));
      // FIXME poll with zero timeout to double confirm the new connection
+     // 把这个connection放入这个ioLoop
+     EventLoop* ioLoop = threadPool_->getNextLoop();
      TcpConnectionPtr conn(
!             new TcpConnection(ioLoop, connName, sockfd, localAddr, peerAddr));
      connections_[connName] = conn;
      conn->setConnectionCallback(connectionCallback_);
      conn->setMessageCallback(messageCallback_);
      conn->setWriteCompleteCallback(writeCompleteCallback_);
      conn->setCloseCallback(
              boost::bind(&TcpServer::removeConnection, this, _1));
!     ioLoop->runInLoop(boost::bind(&TcpConnection::connectEstablished, conn));
  }
  
+ 
+ 
  void TcpServer::removeConnection(const TcpConnectionPtr& conn){
+     // FIXME: unsafe
+     loop_->runInLoop(
+             boost::bind(&TcpServer::removeConnectionInLoop, this, conn));
+ }
+ 
+ void TcpServer::removeConnectionInLoop(const TcpConnectionPtr& conn){
      loop_->assertInLoopThread();
!     LOG_INFO << "TcpServer::removeConnectionInLoop [" << name_
               << "] - connection " << conn->name();
      size_t n = connections_.erase(conn->name());
      assert(n == 1);
      (void) n;
      // 延长生命周期,让conn的生命周期延长到connectedDestoryed被调用的时候
!     // 进入这个loop删除这个connection
!     EventLoop* ioLoop = conn->getLoop();
!     ioLoop->queueInLoop(
              boost::bind(&TcpConnection::connectDestoryed, conn));
  }
